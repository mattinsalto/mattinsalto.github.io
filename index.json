[{"iconClass":"fa-folder","objectID":"31d1384c4023fb3d5edb09b7367a4fd0","title":"Code","type":"category","url":"/categories/code"},{"iconClass":"fa-folder","objectID":"0e64f429cebf64fc183caf336dd20143","title":"Tutorials","type":"category","url":"/categories/tutorials"},{"iconClass":"fa-user","objectID":"ade81d232575b8eb0fb638ec7e7dcdae","title":"Martin garmendia","type":"author","url":"/author/martin-garmendia"},{"iconClass":"fa-tag","objectID":"a5b6933e2db374e4f0db62b1a23f900e","title":"3g modem","type":"tag","url":"/tags/3g-modem"},{"iconClass":"fa-tag","objectID":"7dff01c2c73062ddd3f04044554fd463","title":"Debugging","type":"tag","url":"/tags/debugging"},{"iconClass":"fa-tag","objectID":"f955345b61521ac998568bb676dbb810","title":"Freedompop","type":"tag","url":"/tags/freedompop"},{"iconClass":"fa-tag","objectID":"0892a7daeba78352a763e1954b718be6","title":"Huawei","type":"tag","url":"/tags/huawei"},{"iconClass":"fa-tag","objectID":"77b0a9f7572c02c34dfc0f1b702c6837","title":"Movistar","type":"tag","url":"/tags/movistar"},{"iconClass":"fa-tag","objectID":"68749503df24ac5998de9495b2f65281","title":"Python","type":"tag","url":"/tags/python"},{"iconClass":"fa-tag","objectID":"c03f4e851f26378907309cc96240d3b0","title":"Raspberry pi","type":"tag","url":"/tags/raspberry-pi"},{"author":"Martin Garmendia","categories":["python","raspberry pi","debugging"],"content":"Although is posible to program in the Raspberry Pi (rpi onwards), is a little bit rudimentary due to it\u0026rsquo;s low power and lack of powerfull IDEs. This is specially true if you don\u0026rsquo;t install a desktop environment as in Raspbian lite.\nThere are some options for Python remote debugging on a rpi, but only few of them are free and posible from a Mac. The option I\u0026rsquo;m gonna write about, is the one provided by Wingware Wing Personal (free editon) Python IDE. You can find the information about rpi Python remote debugging in it\u0026rsquo;s website, but it has some broken links and there are areas not covered by specific solutions that let the reader choose her preferred one. I\u0026rsquo;ll try to give a complete solution here.\n Download Wing Python IDE  http://wingware.com/downloads/wing-personal\n Enable ssh remote access in the rpi  If you don\u0026rsquo;t have enabled it yet, follow the instructions at Raspberry pi official docs\nOnce enabled, to know your rpi IP type below command in the rpi terminal\n$ ifconfig  You will see the IPs for the different network interfaces:\neth0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1500 inet 192.168.1.91 netmask 255.255.255.0 broadcast 192.168.1.255 inet6 fe80::178e:1188:54a:c522 prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; ether b8:27:eb:e9:67:5b txqueuelen 1000 (Ethernet) RX packets 343823 bytes 26399285 (25.1 MiB) RX errors 0 dropped 100 overruns 0 frame 0 TX packets 54392 bytes 3054249 (2.9 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73\u0026lt;UP,LOOPBACK,RUNNING\u0026gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10\u0026lt;host\u0026gt; loop txqueuelen 1 (Local Loopback) RX packets 48 bytes 6280 (6.1 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 48 bytes 6280 (6.1 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0  When using a wired connection it will be eth0, if wireless, should be wlan0\nIf everything is OK, you can connect to rpi with:\n$ ssh pi@your-rpi-ip  In order to avoid discovering what IP your rpi has taken every time it reboots, you could set a static IP editing /etc/dhcpcd.conf\n$ nano /etc/dhcpcd.conf  and adding this lines to the end of the file\ninterface eth0 static ip_address=192.168.1.91/24 static routers=192.168.1.1 static domain_name_servers=8.8.8.8 8.8.4.4  then reboot your rpi for the configuration to take effect\n$ reboot  or sue a\n$ sudo service networking restart   Generate ssh public / private key pair  We don\u0026rsquo;t want to be promted for a password every time we want to execute a command in the rpi. We can generate a public and private key pair and put the public key in the rpi to trust the connection without promting for password.\nIn Mac Terminal type (leave it empty when asks for password protection)\n$ cd ~/.ssh $ ssh-keygen -t rsa  Now copy the contents of id_rsa.pub to /home/pi/.ssh/authorized_keys as a new line in the rpi. If authorized_keys doesn\u0026rsquo;t exist you can create it and copy the contents of id_rsa.pub.\nFor now on, you can ssh your rpi from the Mac without password. This also means you can copy files from the Mac to the rpi via scp without password promting.\n Download Wingware remote debugger to the raspberry pi  At the time of writing the last version of Wing Python IDE is 6.0.9. If it has changed, here you have the root of the download directory for the different versions. Copy the link to your version of wingide-debugger-raspbian and ssh your rpi:\n$ ssh pi@rpi-ip $ wget http://wingware.com/pub/wingide/6.0.9/wingide-debugger-raspbian-6.0.9-1.tar.bz2 $ tar xaf wingide-debugger-raspbian-6.0.9-1.tar.bz2 $ mv wingide-debugger-raspbian-6.0.9-1 wing-rmt-dbgr  We also need to copy a file (wingdebugpw) from Settings directory of the Wing installation on the Mac to the recently decompressed directory in the rpi. To see where this directory is, go to Wings about box (Wingpersonal menu -\u0026gt; About Wingpersonal -\u0026gt; Settings directory).\nOnce located, copy to rpi via scp (don\u0026rsquo;t forget to change YourUser and your-rpi-ip)\n$ scp \u0026quot;/Users/YourUser/Library/Application Support/Wing Personal/v6/wingdebugpw\u0026quot; pi@your-rpi-ip:/home/pi/wing-rmt-dbgr   Create a new Wing Pyhton IDE project  In this example we will name it PythonRemoteDebugTest and locate it at /Users/YourUser/src/PythonRemoteDebugTest Add a new python script to your project:\nmain.py 12 name = input(\u0026#39;What is your name? \u0026#39;)\rprint(\u0026#39;Hello {}\u0026#39;.format(name))  \nRun it locally to ensure it works as expected\n Map local directory with a remote one  Create a directory in the rpi to host your python proyects. You can execute a remote command via ssh from the Mac Terminal without the need of an open ssh sesssion\n$ ssh pi@192.168.1.91 \u0026quot;mkdir /home/pi/python\u0026quot;  In Wing Python IDE go to\nPreferences -\u0026gt; Debugger -\u0026gt; Advanced\nScroll down to Location Map, select de existing line and pulse edit button.\nLeave remote IP as 127.0.0.1 because we will set a reverse ssh tunnel so will look like the connection comes from localhost.\nSpecify a mapping and set remote to\n/home/pi/python\nand local to\n/Users/mattinsalto/src/Python\n Create a reverse ssh tunnel between your Mac and Rpi  $ ssh -N -R 50005:localhost:50005 pi@192.168.1.91   Copy your project files to rpi  $ scp -r /Users/mattinsalto/src/Python/PythonRemoteDebugTest pi@192.168.1.91:/home/pi/python   Start remote debugging setting desired python version and calling wingdb script  $ ssh pi@192.168.1.91 \u0026quot;export WINGDB_PYTHON=/usr/bin/python3 \u0026amp;\u0026amp; sudo -E /home/pi/wing-rmt-dbgr/wingdb /home/pi/python/PythonRemoteDebugTest/main.py\u0026quot;  ","iconClass":"fa-pencil","objectID":"a5479090628faa84958777bfcde9c527","tags":["python","raspberry pi","debugging"],"title":"Pyhton remote debugging on a Raspberry Pi","type":"code","url":"/code/remote-debugging-with-wing-python-ide/"},{"author":"Martin Garmendia","categories":["raspberry pi","huawei","3g-modem","movistar","freedompop"],"content":" Linux kernel has drivers for this modem, so the installation is straight forward:\n# apt-get install wvdial  Edit configuration\n# nano /etc/wvdial.conf  Modem standard configuration:\n[Dialer Defaults] New PPPD = yes Stupid Mode = 1 Modem Type = 3G Modem Baud = 460800 Modem = /dev/ttyUSB0 ISDN = 0 [Dialer poweron] Init1 = AT+CFUN=1 [Dialer poweroff] Init1 = AT+CFUN=0  ISP specific config. Here you have different configurations for two ISPs from Spain. Movistar:\n[Dialer movistar] Init2 = AT Init3 = AT\u0026amp;F\u0026amp;D2\u0026amp;C1E0V1S0=0 Init4 = AT+IFC=2,2 Init5 = ATS0=0 Init6 = AT Init7 = AT\u0026amp;F\u0026amp;D2\u0026amp;C1E0V1S0=0 Init8 = AT+IFC=2,2 Phone = *99***1# Password = MOVISTAR Username = MOVISTAR  FreedomPop (Uses masmovil configuration)\n[Dialer freedompop] Init1 = ATZ Init2 = ATQ0 V1 E1 S0=0 \u0026amp;C1 \u0026amp;D2 Init3 = Init4 = AT+CGDCONT=1,\u0026quot;IP\u0026quot;,\u0026quot;internetmas\u0026quot;,\u0026quot;\u0026quot;,0,0 Baud = 3600000 Username = off Password = off New PPPD = yes Phone = *99*# Dial Command = ATDT Stupid Mode = 1 Compuserve = 0 Force Address = Idle Seconds = 0 Carrier Check = no ISDN = 0 Auto DNS = 1 Remote Name = \u0026quot;*\u0026quot;  To dial, type:\n# wvdial freedompop  I have deactivated SIM’s PIN for simplicity and I haven’t tryed to dial with it, but you could test with:\n[Dialer pin] Dial Command = ATDT Init = ATZ Init2 = AT+CPIN=XXXX  then:\n# wvdial pin # wvdial movistar  To test if it has worked sue an ifconfig to see if ppp0 has a valid IP\n# ifconfig  To connect at startup edit\n# nano /etc/network/interfaces  and add this line\niface ppp0 inet wvdial provider movistar  As the modem takes some time for initialization we could delay the dialing in\n# nano /etc/rc.local  for 20 seconds\nsleep 20 ifup ppp0  Credit goes to:\nJuan José Valera. and\nPablo Martín Medrano. ","iconClass":"fa-pencil","objectID":"9ea25c3c0a5f134c33dcec938152995f","tags":["raspberry pi","huawei","3g-modem","movistar","freedompop"],"title":"Huawei E220 modem on Raspberry pi","type":"article","url":"/article/huawei-e220-on-raspberry-pi/"}]